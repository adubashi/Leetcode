
public class RabinKarp {
	
	private String pat;
	private long patHash;
	private int M;
	private long Q;
	//Alphabet size
	private int R = 256;
	private long RM;          // R^(M-1) % Q         
	
	public RabinKarp(String pat){
		 this.pat = pat;        // save pattern (only needed for Las Vegas)      
		 this.M = pat.length();    
		 //Random odd prime
		 Q = 1223;
		 RM = 1;
		 for(int i = 1;  i <= M - 1; i++){
			 RM =  (R * RM) % Q; 
		 }
		 patHash = hash(pat, M);
	}
	
	private long hash(String key, int M){
		long h = 0;
		for(int i = 0; i < M; i++){
			h = (R * h + key.charAt(i)) % M;
		}
		return h;
	}
	
	public boolean check(int i ){
		//Monte Carlo
		//The probability that we match to the same hash is the prime decimal places to the negative -->
		// 10^-n
		return true;
	}
	
	private int search(String txt){
		 int N = txt.length();      
		 long txtHash = hash(txt, M);      
		 if (patHash == txtHash) return 0;     
		 
		 
	}

}
